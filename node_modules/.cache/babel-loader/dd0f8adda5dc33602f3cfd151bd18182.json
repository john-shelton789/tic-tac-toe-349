{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\John\\\\Documents\\\\CPSC 349\\\\front-end-dev-book\\\\tic-tac-toe-react\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    console.log(this.props.size);\n    let boardsize = this.props.size;\n    let cols = [];\n\n    for (let i = 0; i < boardsize; i++) {\n      let row = [];\n\n      for (let j = 0; j < boardsize; j++) {\n        row.push(this.renderSquare(i * boardsize + j));\n      }\n\n      cols.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, row));\n    }\n\n    return React.createElement(\"div\", {\n      key: cols,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, cols);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props); //  this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      boardsize: 3,\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(9).fill(null)\n      }]\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      boardsize: event.target.value\n    });\n  } // handleSubmit(event) {\n  //   event.preventDefault();\n  //   console.log(event.target.size.value);\n  //   let boardLength = event.target.size.value * event.target.size.value;\n  //   console.log(boardLength);\n  //   console.log(typeof boardLength);\n  //   this.setState({\n  //     boardsize: event.target.size.value,\n  //     stepNumber: 0,\n  //     xIsNext: true,\n  //     history: [{\n  //       squares:Array(boardLength).fill(null),\n  //       lastCoords: 0\n  //     }],\n  // });\n  // }\n\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares, this.state.boardsize) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        lastCoords: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    var boardsize = prompt(\"Please Enter the board size\", 3);\n    var history = this.state.history;\n    var current = history[this.state.stepNumber];\n    var winner = calculateWinner(current.squares, boardsize);\n    const moves = history.map((step, move) => {\n      var lastCoords = step.lastCoords;\n      var col = 1 + lastCoords % boardsize;\n      var row = 1 + Math.floor(lastCoords / boardsize);\n      var desc = move ? \"Go to move #\".concat(move, \" (\").concat(col, \", \").concat(row, \")\") : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      size: boardsize,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, moves)));\n  }\n\n}\n/*\r\n<form className=\"sizeform\" onSubmit={this.handleSubmit}>\r\n  <label>\r\n    Board Size:\r\n    <input type=\"number\"\r\n      name=\"size\"\r\n      defaultValue={this.state.boardsize}\r\n    />\r\n  </label>\r\n  <input type=\"submit\" value=\"Submit\" />\r\n</form>\r\n*/\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 165\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares, sizeboard) {\n  let boardlength = sizeboard * sizeboard;\n  let verticalwin = false;\n  let horizontalwin = false; //let diagonalwin = false;\n\n  console.log(\"-----Beginning tests-----\");\n  console.log(\"board size = \" + sizeboard);\n  console.log(\"Squares: \" + squares); //test for vertical win\n\n  for (let i = 0; i < sizeboard; i++) {\n    let verticalsquares = [];\n\n    for (let j = i; j < boardlength; j += sizeboard) {\n      console.log(\"i = \" + i + \" j= \" + j);\n      verticalsquares.push(squares[j]);\n    }\n\n    verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\n    console.log(\"vertical test starting at i = \" + i + \": \" + verticalsquares);\n\n    if (verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\n      verticalwin = false;\n      return verticalsquares[0];\n    }\n  } //test for horizontal victory\n\n\n  for (let k = 0; k < boardlength; k += sizeboard) {\n    let horizontalsquares = [];\n\n    for (let l = k; l < k + sizeboard; l++) {\n      console.log(\"k = \" + k + \" l= \" + l);\n      horizontalsquares.push(squares[l]);\n    }\n\n    horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\n    console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\n\n    if (horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\n      horizontalwin = false;\n      return horizontalsquares[0];\n    }\n  }\n\n  return null;\n}\n/*\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n  */","map":{"version":3,"sources":["D:/Users/John/Documents/CPSC 349/front-end-dev-book/tic-tac-toe-react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","console","log","size","boardsize","cols","row","j","push","Game","constructor","state","stepNumber","xIsNext","history","Array","fill","handleChange","event","setState","target","handleClick","slice","current","length","calculateWinner","concat","lastCoords","jumpTo","step","prompt","winner","moves","map","move","col","Math","floor","desc","status","document","getElementById","sizeboard","boardlength","verticalwin","horizontalwin","verticalsquares","every","v","k","horizontalsquares","l","h"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n\r\n  render() {\r\n    console.log(this.props.size);\r\n    let boardsize = this.props.size;\r\n    let cols = [];\r\n    for(let i = 0; i < boardsize; i++) {\r\n      let row = [];\r\n      for(let j = 0; j< boardsize; j++) {\r\n        row.push(this.renderSquare(i * boardsize + j));\r\n      }\r\n      cols.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n\r\n    return (\r\n    <div key={cols}>{cols}</div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  //  this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      boardsize: 3,\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      history: [{\r\n        squares:Array(9).fill(null),\r\n      }],\r\n    };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({boardsize: event.target.value});\r\n  }\r\n\r\n  // handleSubmit(event) {\r\n  //   event.preventDefault();\r\n  //   console.log(event.target.size.value);\r\n  //   let boardLength = event.target.size.value * event.target.size.value;\r\n  //   console.log(boardLength);\r\n  //   console.log(typeof boardLength);\r\n  //   this.setState({\r\n  //     boardsize: event.target.size.value,\r\n  //     stepNumber: 0,\r\n  //     xIsNext: true,\r\n  //     history: [{\r\n  //       squares:Array(boardLength).fill(null),\r\n  //       lastCoords: 0\r\n  //     }],\r\n  // });\r\n  // }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares, this.state.boardsize) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        lastCoords: i\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n   this.setState({\r\n     stepNumber: step,\r\n     xIsNext: (step % 2) === 0,\r\n   });\r\n }\r\n\r\n  render() {\r\n\r\n    var boardsize = prompt(\"Please Enter the board size\", 3);\r\n\r\n\r\n    var history = this.state.history;\r\n    var current = history[this.state.stepNumber];\r\n    var winner = calculateWinner(current.squares, boardsize);\r\n\r\n    const moves = history.map((step, move) => {\r\n      var lastCoords = step.lastCoords;\r\n      var col = 1 + lastCoords % boardsize;\r\n      var row = 1 + Math.floor(lastCoords / boardsize);\r\n      var desc = move ?\r\n        `Go to move #${move} (${col}, ${row})` :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n          squares={current.squares}\r\n          size={boardsize}\r\n          onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n/*\r\n<form className=\"sizeform\" onSubmit={this.handleSubmit}>\r\n  <label>\r\n    Board Size:\r\n    <input type=\"number\"\r\n      name=\"size\"\r\n      defaultValue={this.state.boardsize}\r\n    />\r\n  </label>\r\n  <input type=\"submit\" value=\"Submit\" />\r\n</form>\r\n*/\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares, sizeboard) {\r\n\r\nlet boardlength = sizeboard * sizeboard;\r\n\r\n\r\nlet verticalwin = false;\r\nlet horizontalwin = false;\r\n//let diagonalwin = false;\r\nconsole.log(\"-----Beginning tests-----\");\r\nconsole.log(\"board size = \" + sizeboard);\r\nconsole.log(\"Squares: \" + squares);\r\n//test for vertical win\r\nfor(let i = 0; i < sizeboard; i++) {\r\n  let verticalsquares = [];\r\n  for(let j = i; j < boardlength; j += sizeboard) {\r\n    console.log(\"i = \" + i + \" j= \" + j);\r\n    verticalsquares.push(squares[j]);\r\n  }\r\n  verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\r\n  console.log(\"vertical test starting at i = \" + i + \": \" +verticalsquares);\r\n  if(verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\r\n\r\n    verticalwin = false;\r\n    return verticalsquares[0];\r\n  }\r\n}\r\n//test for horizontal victory\r\nfor(let k = 0; k < boardlength; k += sizeboard) {\r\n  let horizontalsquares = [];\r\n  for(let l = k; l < k + sizeboard; l++) {\r\n        console.log(\"k = \" + k + \" l= \" + l);\r\n    horizontalsquares.push(squares[l]);\r\n  }\r\n  horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\r\n  console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\r\n  if(horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\r\n\r\n    horizontalwin = false;\r\n    return horizontalsquares[0];\r\n    }\r\n  }\r\nreturn null;\r\n}\r\n\r\n/*\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n  */\r\n"]},"metadata":{},"sourceType":"module"}