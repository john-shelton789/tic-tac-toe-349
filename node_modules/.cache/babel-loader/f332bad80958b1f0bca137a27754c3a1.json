{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\John\\\\Documents\\\\CPSC 349\\\\front-end-dev-book\\\\tic-tac-toe-react\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    console.log(this.props.size);\n    let boardsize = this.props.size;\n    let cols = [];\n\n    for (let i = 0; i < boardsize; i++) {\n      let row = [];\n\n      for (let j = 0; j < boardsize; j++) {\n        row.push(this.renderSquare(i * boardsize + j));\n      }\n\n      cols.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, row));\n    }\n\n    return React.createElement(\"div\", {\n      key: cols,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, cols);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      boardsize: 3,\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(9).fill(null)\n      }]\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      boardsize: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target.size.value);\n    let boardLength = parseInt(event.target.size.value) * parseInt(event.target.size.value);\n    console.log(boardLength);\n    console.log(typeof boardLength);\n    this.setState({\n      boardsize: parseInt(event.target.size.value),\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(boardLength).fill(null),\n        lastCoords: 0\n      }]\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares, this.state.boardsize) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        lastCoords: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    var history = this.state.history;\n    var current = history[this.state.stepNumber];\n    var winner = calculateWinner(current.squares, this.state.boardsize);\n    const moves = history.map((step, move) => {\n      var lastCoords = step.lastCoords;\n      var col = 1 + lastCoords % this.state.boardsize;\n      var row = 1 + Math.floor(lastCoords / this.state.boardsize);\n      var desc = move ? \"Go to move #\".concat(move, \" (\").concat(col, \", \").concat(row, \")\") : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: move === stepNumber ? 'selected-move' : '',\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \" Tic-Tac-Toe! \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"sizeform\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Board Size:\", React.createElement(\"input\", {\n      type: \"number\",\n      name: \"size\",\n      min: \"2\",\n      defaultValue: this.state.boardsize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Start New Game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, status)), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      size: this.state.boardsize,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })))))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, moves)))));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 184\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares, sizeboard) {\n  let boardlength = sizeboard * sizeboard;\n  let verticalwin = false;\n  let horizontalwin = false;\n  let diag1win = false;\n  let diag2win = false;\n  console.log(\"-----Beginning tests-----\");\n  console.log(\"board size = \" + sizeboard);\n  console.log(\"Squares: \" + squares); //test for vertical win\n\n  for (let i = 0; i < sizeboard; i++) {\n    let verticalsquares = [];\n\n    for (let j = i; j < boardlength; j += sizeboard) {\n      console.log(\"i = \" + i + \" j= \" + j);\n      verticalsquares.push(squares[j]);\n    }\n\n    verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\n    console.log(\"vertical test starting at i = \" + i + \": \" + verticalsquares);\n\n    if (verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\n      verticalwin = false;\n      return verticalsquares[0];\n    }\n  } //test for horizontal victory\n\n\n  for (let k = 0; k < boardlength; k += sizeboard) {\n    let horizontalsquares = [];\n\n    for (let l = k; l < k + sizeboard; l++) {\n      console.log(\"k = \" + k + \" l = \" + l);\n      horizontalsquares.push(squares[l]);\n    }\n\n    horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\n    console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\n\n    if (horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\n      horizontalwin = false;\n      return horizontalsquares[0];\n    }\n  }\n\n  if (sizeboard > 1) {\n    //diagonal code causes crashes with board size = 1\n    //test for top-left-to-bottom-right diagonal victory\n    let diag1squares = [];\n\n    for (let i = 0; i < boardlength; i += sizeboard + 1) {\n      console.log(\"i = \" + i);\n      diag1squares.push(squares[i]);\n    }\n\n    diag1win = diag1squares.every(a => a === diag1squares[0]);\n    console.log(\"diagonal 1 test: \" + diag1squares);\n\n    if (diag1win === true && diag1squares[0] != null && diag1squares.length === sizeboard) {\n      diag1win = false;\n      return diag1squares[0];\n    } //test for bottom-left-to-top-right diagonal victory\n\n\n    let diag2squares = [];\n\n    for (let j = sizeboard - 1; j < boardlength - sizeboard + 1; j += sizeboard - 1) {\n      console.log(\"j = \" + j);\n      diag2squares.push(squares[j]);\n    }\n\n    diag2win = diag2squares.every(a => a === diag2squares[0]);\n    console.log(\"diagonal 2 test: \" + diag2squares);\n\n    if (diag2win === true && diag2squares[0] != null && diag2squares.length === sizeboard) {\n      diag2win = false;\n      return diag2squares[0];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["D:/Users/John/Documents/CPSC 349/front-end-dev-book/tic-tac-toe-react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","console","log","size","boardsize","cols","row","j","push","Game","constructor","handleSubmit","bind","state","stepNumber","xIsNext","history","Array","fill","handleChange","event","setState","target","preventDefault","boardLength","parseInt","lastCoords","handleClick","slice","current","length","calculateWinner","concat","jumpTo","step","winner","moves","map","move","col","Math","floor","desc","status","document","getElementById","sizeboard","boardlength","verticalwin","horizontalwin","diag1win","diag2win","verticalsquares","every","v","k","horizontalsquares","l","h","diag1squares","a","diag2squares"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n      return (\r\n        <Square key={i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n\r\n  render() {\r\n    console.log(this.props.size);\r\n    let boardsize = this.props.size;\r\n    let cols = [];\r\n    for(let i = 0; i < boardsize; i++) {\r\n      let row = [];\r\n      for(let j = 0; j< boardsize; j++) {\r\n        row.push(this.renderSquare(i * boardsize + j));\r\n      }\r\n      cols.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n\r\n    return (\r\n    <div key={cols}>{cols}</div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      boardsize: 3,\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      history: [{\r\n        squares:Array(9).fill(null),\r\n      }],\r\n    };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({boardsize: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(event.target.size.value);\r\n    let boardLength = parseInt(event.target.size.value) * parseInt(event.target.size.value);\r\n    console.log(boardLength);\r\n    console.log(typeof boardLength);\r\n    this.setState({\r\n      boardsize: parseInt(event.target.size.value),\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      history: [{\r\n        squares:Array(boardLength).fill(null),\r\n        lastCoords: 0\r\n      }],\r\n  });\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares, this.state.boardsize) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        lastCoords: i\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n   this.setState({\r\n     stepNumber: step,\r\n     xIsNext: (step % 2) === 0,\r\n   });\r\n }\r\n\r\n  render() {\r\n    var history = this.state.history;\r\n    var current = history[this.state.stepNumber];\r\n    var winner = calculateWinner(current.squares, this.state.boardsize);\r\n\r\n    const moves = history.map((step, move) => {\r\n      var lastCoords = step.lastCoords;\r\n      var col = 1 + lastCoords % this.state.boardsize;\r\n      var row = 1 + Math.floor(lastCoords / this.state.boardsize);\r\n      var desc = move ?\r\n        `Go to move #${move} (${col}, ${row})` :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === stepNumber ? 'selected-move' : ''}\r\n           onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n      <ul>\r\n        <li>\r\n          <label className=\"title\"> Tic-Tac-Toe! </label>\r\n        </li>\r\n        <li>\r\n          <div>\r\n            <ul>\r\n              <li>\r\n                <form className=\"sizeform\" onSubmit={this.handleSubmit}>\r\n                  <label>\r\n                    Board Size:\r\n                    <input type=\"number\"\r\n                      name=\"size\"\r\n                      min=\"2\"\r\n                      defaultValue={this.state.boardsize}\r\n                      />\r\n                  </label>\r\n                  <input type=\"submit\" value=\"Start New Game\" />\r\n                </form>\r\n              </li>\r\n              <li>\r\n                <div>{status}</div>\r\n              </li>\r\n              <li>\r\n                <div className=\"game-board\">\r\n                  <Board\r\n                  squares={current.squares}\r\n                  size={this.state.boardsize}\r\n                  onClick={(i) => this.handleClick(i)}\r\n                  />\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </li>\r\n        <li>\r\n          <div className=\"game-info\">\r\n            <ol>\r\n              {moves}\r\n            </ol>\r\n          </div>\r\n        </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares, sizeboard) {\r\n\r\n  let boardlength = sizeboard * sizeboard;\r\n\r\n\r\n  let verticalwin = false;\r\n  let horizontalwin = false;\r\n  let diag1win = false;\r\n  let diag2win = false;\r\n  console.log(\"-----Beginning tests-----\");\r\n  console.log(\"board size = \" + sizeboard);\r\n  console.log(\"Squares: \" + squares);\r\n  //test for vertical win\r\n  for(let i = 0; i < sizeboard; i++) {\r\n    let verticalsquares = [];\r\n    for(let j = i; j < boardlength; j += sizeboard) {\r\n      console.log(\"i = \" + i + \" j= \" + j);\r\n      verticalsquares.push(squares[j]);\r\n    }\r\n    verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\r\n    console.log(\"vertical test starting at i = \" + i + \": \" +verticalsquares);\r\n    if(verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\r\n      verticalwin = false;\r\n      return verticalsquares[0];\r\n    }\r\n  }\r\n  //test for horizontal victory\r\n  for(let k = 0; k < boardlength; k += sizeboard) {\r\n    let horizontalsquares = [];\r\n    for(let l = k; l < k + sizeboard; l++) {\r\n          console.log(\"k = \" + k + \" l = \" + l);\r\n      horizontalsquares.push(squares[l]);\r\n    }\r\n    horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\r\n    console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\r\n    if(horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\r\n      horizontalwin = false;\r\n      return horizontalsquares[0];\r\n      }\r\n    }\r\n\r\n  if(sizeboard > 1){//diagonal code causes crashes with board size = 1\r\n\r\n  //test for top-left-to-bottom-right diagonal victory\r\n  let diag1squares = [];\r\n  for(let i = 0; i < boardlength; i += sizeboard + 1) {\r\n    console.log(\"i = \" + i);\r\n    diag1squares.push(squares[i]);\r\n  }\r\n\r\n  diag1win = diag1squares.every(a => a === diag1squares[0]);\r\n  console.log(\"diagonal 1 test: \" + diag1squares);\r\n  if (diag1win === true && diag1squares[0] != null && diag1squares.length === sizeboard){\r\n    diag1win = false;\r\n    return diag1squares[0];\r\n  }\r\n\r\n  //test for bottom-left-to-top-right diagonal victory\r\n  let diag2squares = [];\r\n  for(let j = sizeboard - 1; j < boardlength - sizeboard + 1; j+= (sizeboard - 1)) {\r\n    console.log(\"j = \" + j )\r\n    diag2squares.push(squares[j]);\r\n  }\r\n\r\n  diag2win = diag2squares.every(a => a === diag2squares[0]);\r\n  console.log(\"diagonal 2 test: \" + diag2squares);\r\n  if(diag2win === true && diag2squares[0] != null && diag2squares.length === sizeboard){\r\n    diag2win = false;\r\n    return diag2squares[0];\r\n  }\r\n  }\r\n\r\n  return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}