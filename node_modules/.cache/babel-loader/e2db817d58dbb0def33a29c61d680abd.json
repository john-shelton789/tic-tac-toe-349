{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\John\\\\Documents\\\\CPSC 349\\\\front-end-dev-book\\\\tic-tac-toe-react\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  // eslint-disable-line no-unused-vars\n  const className = 'square ' + (props.winningsquare ? 'winningsquare' : '');\n  return React.createElement(\"button\", {\n    className: className,\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \" \", props.value, \" \");\n}\n\nclass Board extends React.Component {\n  // eslint-disable-line no-unused-vars\n  renderSquare(i) {\n    const indexes = this.props.indexes;\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      winningsquare: indexes && indexes.includes(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    console.log(this.props.size);\n    let boardsize = this.props.size;\n    let cols = [];\n\n    for (let i = 0; i < boardsize; i++) {\n      let row = [];\n\n      for (let j = 0; j < boardsize; j++) {\n        row.push(this.renderSquare(i * boardsize + j));\n      }\n\n      cols.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \" \", row, \" \"));\n    }\n\n    return React.createElement(\"div\", {\n      key: cols,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \" \", cols, \" \");\n  }\n\n}\n\nclass Game extends React.Component {\n  // eslint-disable-line no-unused-vars\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      isAscending: true,\n      boardsize: 3,\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(9).fill(null)\n      }]\n    };\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target.size.value);\n    let boardLength = parseInt(event.target.size.value) * parseInt(event.target.size.value);\n    console.log(boardLength);\n    console.log(typeof boardLength);\n    this.setState({\n      boardsize: parseInt(event.target.size.value),\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(boardLength).fill(null),\n        lastCoords: 0\n      }]\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares, this.state.boardsize).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        lastCoords: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  handleSort() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    var history = this.state.history;\n    var current = history[this.state.stepNumber];\n    var winInfo = calculateWinner(current.squares, this.state.boardsize);\n    var winner = null;\n\n    if (winInfo) {\n      winner = winInfo.winner;\n    }\n\n    let moves = history.map((step, move) => {\n      var lastCoords = step.lastCoords;\n      var col = 1 + lastCoords % this.state.boardsize;\n      var row = 1 + Math.floor(lastCoords / this.state.boardsize);\n      var desc = move ? \"Go to move #\".concat(move, \" (\").concat(col, \", \").concat(row, \")\") : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: move === this.state.stepNumber ? 'selected-move' : '',\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \" \", desc, \" \"), \" \");\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      if (winInfo.isDraw) {\n        status = \"Draw\";\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n    } //reverse the order of the move list\n\n\n    const isAscending = this.state.isAscending;\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \" Tic - Tac - Toe! \"), \" \"), \" \", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"sizeform\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Board Size:\", React.createElement(\"input\", {\n      type: \"number\",\n      name: \"size\",\n      min: \"2\",\n      defaultValue: this.state.boardsize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), \" \"), \" \", React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Start New Game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), \" \"), \" \", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \" \", status, \" \"), \" \"), \" \", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      size: this.state.boardsize,\n      onClick: i => this.handleClick(i),\n      indexes: winInfo.indexes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), \" \"), \" \"), \" \"), \" \"), \" \"), \" \", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.handleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \" \", isAscending ? 'descending' : 'ascending', \" \"), \" \", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \" \", moves, \" \"), \" \"), \" \"), \" \"), \" \");\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 272\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares, sizeboard) {\n  let boardlength = sizeboard * sizeboard;\n  let verticalwin = false;\n  let horizontalwin = false;\n  let diag1win = false;\n  let diag2win = false;\n  let isDraw = false;\n  console.log(\"-----Beginning tests-----\");\n  console.log(\"board size = \" + sizeboard);\n  console.log(\"Squares: \" + squares); //test for vertical win\n\n  for (let i = 0; i < sizeboard; i++) {\n    let verticalsquares = [];\n    let verticalindexes = [];\n\n    for (let j = i; j < boardlength; j += sizeboard) {\n      console.log(\"i = \" + i + \" j= \" + j);\n      verticalsquares.push(squares[j]);\n      verticalindexes.push(j);\n    }\n\n    verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\n    console.log(\"vertical test starting at i = \" + i + \": \" + verticalsquares);\n\n    if (verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\n      verticalwin = false;\n      return {\n        indexes: verticalindexes,\n        winner: verticalsquares[0],\n        isDraw: isDraw\n      };\n    }\n  } //test for horizontal victory\n\n\n  for (let k = 0; k < boardlength; k += sizeboard) {\n    let horizontalsquares = [];\n    let horizontalindexes = [];\n\n    for (let l = k; l < k + sizeboard; l++) {\n      console.log(\"k = \" + k + \" l = \" + l);\n      horizontalsquares.push(squares[l]);\n      horizontalindexes.push(l);\n    }\n\n    horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\n    console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\n\n    if (horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\n      horizontalwin = false;\n      return {\n        indexes: horizontalindexes,\n        winner: horizontalsquares[0],\n        isDraw: isDraw\n      };\n    }\n  }\n\n  if (sizeboard > 1) {\n    //diagonal code causes crashes with board size = 1\n    //test for top-left-to-bottom-right diagonal victory\n    let diag1squares = [];\n    let diag1indexes = [];\n\n    for (let i = 0; i < boardlength; i += sizeboard + 1) {\n      console.log(\"i = \" + i);\n      diag1squares.push(squares[i]);\n      diag1indexes.push(i);\n    }\n\n    diag1win = diag1squares.every(a => a === diag1squares[0]);\n    console.log(\"diagonal 1 test: \" + diag1squares);\n\n    if (diag1win === true && diag1squares[0] != null && diag1squares.length === sizeboard) {\n      diag1win = false;\n      return {\n        indexes: diag1indexes,\n        winner: diag1squares[0],\n        isDraw: isDraw\n      };\n    } //test for bottom-left-to-top-right diagonal victory\n\n\n    let diag2squares = [];\n    let diag2indexes = [];\n\n    for (let j = sizeboard - 1; j < boardlength - sizeboard + 1; j += sizeboard - 1) {\n      console.log(\"j = \" + j);\n      diag2squares.push(squares[j]);\n      diag2indexes.push(j);\n    }\n\n    diag2win = diag2squares.every(a => a === diag2squares[0]);\n    console.log(\"diagonal 2 test: \" + diag2squares);\n\n    if (diag2win === true && diag2squares[0] != null && diag2squares.length === sizeboard) {\n      diag2win = false;\n      return {\n        indexes: diag2indexes,\n        winner: diag2squares[0],\n        isdraw: isDraw\n      };\n    }\n  } //test for a draw\n\n\n  isDraw = true;\n\n  for (let i = 0; i < boardlength; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n\n  return {\n    indexes: null,\n    winner: null,\n    isDraw: isDraw\n  };\n}","map":{"version":3,"sources":["D:/Users/John/Documents/CPSC 349/front-end-dev-book/tic-tac-toe-react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","className","winningsquare","onClick","value","Board","Component","renderSquare","i","indexes","squares","includes","render","console","log","size","boardsize","cols","row","j","push","Game","constructor","handleSubmit","bind","state","isAscending","stepNumber","xIsNext","history","Array","fill","event","preventDefault","target","boardLength","parseInt","setState","lastCoords","handleClick","slice","current","length","calculateWinner","winner","concat","handleSort","jumpTo","step","winInfo","moves","map","move","col","Math","floor","desc","status","isDraw","reverse","document","getElementById","sizeboard","boardlength","verticalwin","horizontalwin","diag1win","diag2win","verticalsquares","verticalindexes","every","v","k","horizontalsquares","horizontalindexes","l","h","diag1squares","diag1indexes","a","diag2squares","diag2indexes","isdraw"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAE;AACvB,QAAMC,SAAS,GAAG,aAAaD,KAAK,CAACE,aAAN,GAAsB,eAAtB,GAAwC,EAArD,CAAlB;AACA,SAAS;AACA,IAAA,SAAS,EACdD,SAFK;AAIP,IAAA,OAAO,EACLD,KAAK,CAACG,OALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAOLH,KAAK,CAACI,KAPD,MAAT;AAWD;;AAED,MAAMC,KAAN,SAAoBR,KAAK,CAACS,SAA1B,CAAoC;AAAE;AAElCC,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd,UAAMC,OAAO,GAAG,KAAKT,KAAL,CAAWS,OAA3B;AACA,WAAS,oBACP,MADO;AACA,MAAA,GAAG,EACRD,CAFK;AAIP,MAAA,KAAK,EACH,KAAKR,KAAL,CAAWU,OAAX,CAAmBF,CAAnB,CALK;AAOP,MAAA,OAAO,EACL,MAAM,KAAKR,KAAL,CAAWG,OAAX,CAAmBK,CAAnB,CARD;AAUP,MAAA,aAAa,EACXC,OAAO,IAAIA,OAAO,CAACE,QAAR,CAAiBH,CAAjB,CAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;AAeD;;AAEDI,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWe,IAAvB;AACA,QAAIC,SAAS,GAAG,KAAKhB,KAAL,CAAWe,IAA3B;AACA,QAAIE,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,SAApB,EAA+BR,CAAC,EAAhC,EAAoC;AAClC,UAAIU,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClCD,QAAAA,GAAG,CAACE,IAAJ,CAAS,KAAKb,YAAL,CAAkBC,CAAC,GAAGQ,SAAJ,GAAgBG,CAAlC,CAAT;AACD;;AACDF,MAAAA,IAAI,CAACG,IAAL,CAAW;AAAM,QAAA,GAAG,EAChBZ,CADO;AAGT,QAAA,SAAS,EAAG,WAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAIPU,GAJO,MAAX;AAMC;;AAED,WAAS;AACH,MAAA,GAAG,EACLD,IAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAILA,IAJK,MAAT;AAOD;;AA7C6B;;AAgDhC,MAAMI,IAAN,SAAmBxB,KAAK,CAACS,SAAzB,CAAmC;AAAE;AACnCgB,EAAAA,WAAW,CAACtB,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKuB,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,IADF;AAEXV,MAAAA,SAAS,EAAE,CAFA;AAGXW,MAAAA,UAAU,EAAE,CAHD;AAIXC,MAAAA,OAAO,EAAE,IAJE;AAKXC,MAAAA,OAAO,EAAE,CAAC;AACRnB,QAAAA,OAAO,EAAEoB,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AADD,OAAD;AALE,KAAb;AASD;;AAEDR,EAAAA,YAAY,CAACS,KAAD,EAAQ;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAK,CAACE,MAAN,CAAanB,IAAb,CAAkBX,KAA9B;AACA,QAAI+B,WAAW,GAAGC,QAAQ,CAACJ,KAAK,CAACE,MAAN,CAAanB,IAAb,CAAkBX,KAAnB,CAAR,GAAoCgC,QAAQ,CAACJ,KAAK,CAACE,MAAN,CAAanB,IAAb,CAAkBX,KAAnB,CAA9D;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYqB,WAAZ;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOqB,WAAnB;AACA,SAAKE,QAAL,CAAc;AACZrB,MAAAA,SAAS,EAAEoB,QAAQ,CAACJ,KAAK,CAACE,MAAN,CAAanB,IAAb,CAAkBX,KAAnB,CADP;AAEZuB,MAAAA,UAAU,EAAE,CAFA;AAGZC,MAAAA,OAAO,EAAE,IAHG;AAIZC,MAAAA,OAAO,EAAE,CAAC;AACRnB,QAAAA,OAAO,EAAEoB,KAAK,CAACK,WAAD,CAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CADD;AAERO,QAAAA,UAAU,EAAE;AAFJ,OAAD;AAJG,KAAd;AASD;;AAEDC,EAAAA,WAAW,CAAC/B,CAAD,EAAI;AACb,UAAMqB,OAAO,GAAG,KAAKJ,KAAL,CAAWI,OAAX,CAAmBW,KAAnB,CAAyB,CAAzB,EAA4B,KAAKf,KAAL,CAAWE,UAAX,GAAwB,CAApD,CAAhB;AACA,UAAMc,OAAO,GAAGZ,OAAO,CAACA,OAAO,CAACa,MAAR,GAAiB,CAAlB,CAAvB;AACA,UAAMhC,OAAO,GAAG+B,OAAO,CAAC/B,OAAR,CAAgB8B,KAAhB,EAAhB;;AACA,QAAIG,eAAe,CAACjC,OAAD,EAAU,KAAKe,KAAL,CAAWT,SAArB,CAAf,CAA+C4B,MAA/C,IAAyDlC,OAAO,CAACF,CAAD,CAApE,EAAyE;AACvE;AACD;;AACDE,IAAAA,OAAO,CAACF,CAAD,CAAP,GAAa,KAAKiB,KAAL,CAAWG,OAAX,GAAqB,GAArB,GAA2B,GAAxC;AACA,SAAKS,QAAL,CAAc;AACZR,MAAAA,OAAO,EAAEA,OAAO,CAACgB,MAAR,CAAe,CAAC;AACvBnC,QAAAA,OAAO,EAAEA,OADc;AAEvB4B,QAAAA,UAAU,EAAE9B;AAFW,OAAD,CAAf,CADG;AAKZmB,MAAAA,UAAU,EAAEE,OAAO,CAACa,MALR;AAMZd,MAAAA,OAAO,EAAE,CAAC,KAAKH,KAAL,CAAWG;AANT,KAAd;AAQD;;AAEDkB,EAAAA,UAAU,GAAG;AACX,SAAKT,QAAL,CAAc;AACZX,MAAAA,WAAW,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADb,KAAd;AAGD;;AAEDqB,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,SAAKX,QAAL,CAAc;AACZV,MAAAA,UAAU,EAAEqB,IADA;AAEZpB,MAAAA,OAAO,EAAGoB,IAAI,GAAG,CAAR,KAAe;AAFZ,KAAd;AAID;;AAEDpC,EAAAA,MAAM,GAAG;AACP,QAAIiB,OAAO,GAAG,KAAKJ,KAAL,CAAWI,OAAzB;AACA,QAAIY,OAAO,GAAGZ,OAAO,CAAC,KAAKJ,KAAL,CAAWE,UAAZ,CAArB;AACA,QAAIsB,OAAO,GAAGN,eAAe,CAACF,OAAO,CAAC/B,OAAT,EAAkB,KAAKe,KAAL,CAAWT,SAA7B,CAA7B;AACA,QAAI4B,MAAM,GAAG,IAAb;;AACA,QAAIK,OAAJ,EAAa;AACXL,MAAAA,MAAM,GAAGK,OAAO,CAACL,MAAjB;AACD;;AAED,QAAIM,KAAK,GAAGrB,OAAO,CAACsB,GAAR,CAAY,CAACH,IAAD,EAAOI,IAAP,KAAgB;AACtC,UAAId,UAAU,GAAGU,IAAI,CAACV,UAAtB;AACA,UAAIe,GAAG,GAAG,IAAIf,UAAU,GAAG,KAAKb,KAAL,CAAWT,SAAtC;AACA,UAAIE,GAAG,GAAG,IAAIoC,IAAI,CAACC,KAAL,CAAWjB,UAAU,GAAG,KAAKb,KAAL,CAAWT,SAAnC,CAAd;AACA,UAAIwC,IAAI,GAAGJ,IAAI,yBACEA,IADF,eACWC,GADX,eACmBnC,GADnB,SAEb,kBAFF;AAIA,aAAS;AACJ,QAAA,GAAG,EACJkC,IAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIP;AACO,QAAA,SAAS,EACdA,IAAI,KAAK,KAAK3B,KAAL,CAAWE,UAApB,GAAiC,eAAjC,GAAmD,EAFrD;AAIA,QAAA,OAAO,EACL,MAAM,KAAKoB,MAAL,CAAYK,IAAZ,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAOEI,IAPF,MAJO,MAAT;AAeD,KAvBW,CAAZ;AA0BA,QAAIC,MAAJ;;AACA,QAAIb,MAAJ,EAAY;AACVa,MAAAA,MAAM,GAAG,aAAab,MAAtB;AACD,KAFD,MAEO;AACL,UAAIK,OAAO,CAACS,MAAZ,EAAoB;AAClBD,QAAAA,MAAM,GAAG,MAAT;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,GAAG,mBAAmB,KAAKhC,KAAL,CAAWG,OAAX,GAAqB,GAArB,GAA2B,GAA9C,CAAT;AACD;AACF,KA5CM,CA6CP;;;AACA,UAAMF,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;;AACA,QAAI,CAACA,WAAL,EAAkB;AAChBwB,MAAAA,KAAK,CAACS,OAAN;AACD;;AAED,WAAS;AACH,MAAA,SAAS,EAAG,MADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AACM,MAAA,SAAS,EAAG,OADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFA,MAFA,OAMK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AACK,MAAA,SAAS,EAAG,UADjB;AAEA,MAAA,QAAQ,EACN,KAAKpC,YAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGA;AACM,MAAA,IAAI,EAAG,QADb;AAEA,MAAA,IAAI,EAAG,MAFP;AAGA,MAAA,GAAG,EAAG,GAHN;AAIA,MAAA,YAAY,EACV,KAAKE,KAAL,CAAWT,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,MALA,OAgBQ;AACF,MAAA,IAAI,EAAG,QADL;AAER,MAAA,KAAK,EAAG,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBR,CAFA,MAFA,OAyBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAEEyC,MAFF,MAFK,MAzBL,OA+BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEL;AACI,MAAA,SAAS,EAAG,YADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,KADA;AACM,MAAA,OAAO,EACXhB,OAAO,CAAC/B,OAFV;AAIA,MAAA,IAAI,EACF,KAAKe,KAAL,CAAWT,SALb;AAOA,MAAA,OAAO,EACJR,CAAD,IAAO,KAAK+B,WAAL,CAAiB/B,CAAjB,CART;AAUA,MAAA,OAAO,EACLyC,OAAO,CAACxC,OAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,MAFK,MA/BL,MAFA,MAFK,MANL,OA+DK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEL;AACI,MAAA,SAAS,EAAG,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AACO,MAAA,OAAO,EACZ,MAAM,KAAKqC,UAAL,EAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAIEpB,WAAW,GAAG,YAAH,GAAkB,WAJ/B,MAFA,OAQS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAEPwB,KAFO,MART,MAFK,MA/DL,MAFO,MAAT;AAqFD;;AAvMgC,C,CA0MnC;;;AAEApD,QAAQ,CAACc,MAAT,CAAiB,oBACf,IADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB,EAEEgD,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF;;AAKA,SAASlB,eAAT,CAAyBjC,OAAzB,EAAkCoD,SAAlC,EAA6C;AAE3C,MAAIC,WAAW,GAAGD,SAAS,GAAGA,SAA9B;AAGA,MAAIE,WAAW,GAAG,KAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIT,MAAM,GAAG,KAAb;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBgD,SAA9B;AACAjD,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAcJ,OAA1B,EAZ2C,CAa3C;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsD,SAApB,EAA+BtD,CAAC,EAAhC,EAAoC;AAClC,QAAI4D,eAAe,GAAG,EAAtB;AACA,QAAIC,eAAe,GAAG,EAAtB;;AACA,SAAK,IAAIlD,CAAC,GAAGX,CAAb,EAAgBW,CAAC,GAAG4C,WAApB,EAAiC5C,CAAC,IAAI2C,SAAtC,EAAiD;AAC/CjD,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASN,CAAT,GAAa,MAAb,GAAsBW,CAAlC;AACAiD,MAAAA,eAAe,CAAChD,IAAhB,CAAqBV,OAAO,CAACS,CAAD,CAA5B;AACAkD,MAAAA,eAAe,CAACjD,IAAhB,CAAqBD,CAArB;AACD;;AACD6C,IAAAA,WAAW,GAAGI,eAAe,CAACE,KAAhB,CAAsBC,CAAC,IAAIA,CAAC,KAAKH,eAAe,CAAC,CAAD,CAAhD,CAAd;AACAvD,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAmCN,CAAnC,GAAuC,IAAvC,GAA8C4D,eAA1D;;AACA,QAAIJ,WAAW,KAAK,IAAhB,IAAwBI,eAAe,CAAC,CAAD,CAAf,IAAsB,IAA9C,IAAsDA,eAAe,CAAC1B,MAAhB,KAA2BoB,SAArF,EAAgG;AAC9FE,MAAAA,WAAW,GAAG,KAAd;AACA,aAAO;AACLvD,QAAAA,OAAO,EAAE4D,eADJ;AAELzB,QAAAA,MAAM,EAAEwB,eAAe,CAAC,CAAD,CAFlB;AAGLV,QAAAA,MAAM,EAAEA;AAHH,OAAP;AAKD;AACF,GAhC0C,CAiC3C;;;AACA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,WAApB,EAAiCS,CAAC,IAAIV,SAAtC,EAAiD;AAC/C,QAAIW,iBAAiB,GAAG,EAAxB;AACA,QAAIC,iBAAiB,GAAG,EAAxB;;AACA,SAAK,IAAIC,CAAC,GAAGH,CAAb,EAAgBG,CAAC,GAAGH,CAAC,GAAGV,SAAxB,EAAmCa,CAAC,EAApC,EAAwC;AACtC9D,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAS0D,CAAT,GAAa,OAAb,GAAuBG,CAAnC;AACAF,MAAAA,iBAAiB,CAACrD,IAAlB,CAAuBV,OAAO,CAACiE,CAAD,CAA9B;AACAD,MAAAA,iBAAiB,CAACtD,IAAlB,CAAuBuD,CAAvB;AACD;;AACDV,IAAAA,aAAa,GAAGQ,iBAAiB,CAACH,KAAlB,CAAwBM,CAAC,IAAIA,CAAC,KAAKH,iBAAiB,CAAC,CAAD,CAApD,CAAhB;AACA5D,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAqC0D,CAArC,GAAyC,IAAzC,GAAgDC,iBAA5D;;AACA,QAAIR,aAAa,KAAK,IAAlB,IAA0BQ,iBAAiB,CAAC,CAAD,CAAjB,IAAwB,IAAlD,IAA0DA,iBAAiB,CAAC/B,MAAlB,KAA6BoB,SAA3F,EAAsG;AACpGG,MAAAA,aAAa,GAAG,KAAhB;AACA,aAAO;AACLxD,QAAAA,OAAO,EAAEiE,iBADJ;AAEL9B,QAAAA,MAAM,EAAE6B,iBAAiB,CAAC,CAAD,CAFpB;AAGLf,QAAAA,MAAM,EAAEA;AAHH,OAAP;AAKD;AACF;;AAED,MAAII,SAAS,GAAG,CAAhB,EAAmB;AAAE;AAEnB;AACA,QAAIe,YAAY,GAAG,EAAnB;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA,SAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,WAApB,EAAiCvD,CAAC,IAAIsD,SAAS,GAAG,CAAlD,EAAqD;AACnDjD,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASN,CAArB;AACAqE,MAAAA,YAAY,CAACzD,IAAb,CAAkBV,OAAO,CAACF,CAAD,CAAzB;AACAsE,MAAAA,YAAY,CAAC1D,IAAb,CAAkBZ,CAAlB;AACD;;AAED0D,IAAAA,QAAQ,GAAGW,YAAY,CAACP,KAAb,CAAmBS,CAAC,IAAIA,CAAC,KAAKF,YAAY,CAAC,CAAD,CAA1C,CAAX;AACAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB+D,YAAlC;;AACA,QAAIX,QAAQ,KAAK,IAAb,IAAqBW,YAAY,CAAC,CAAD,CAAZ,IAAmB,IAAxC,IAAgDA,YAAY,CAACnC,MAAb,KAAwBoB,SAA5E,EAAuF;AACrFI,MAAAA,QAAQ,GAAG,KAAX;AACA,aAAO;AACLzD,QAAAA,OAAO,EAAEqE,YADJ;AAELlC,QAAAA,MAAM,EAAEiC,YAAY,CAAC,CAAD,CAFf;AAGLnB,QAAAA,MAAM,EAAEA;AAHH,OAAP;AAKD,KApBgB,CAsBjB;;;AACA,QAAIsB,YAAY,GAAG,EAAnB;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA,SAAK,IAAI9D,CAAC,GAAG2C,SAAS,GAAG,CAAzB,EAA4B3C,CAAC,GAAG4C,WAAW,GAAGD,SAAd,GAA0B,CAA1D,EAA6D3C,CAAC,IAAK2C,SAAS,GAAG,CAA/E,EAAmF;AACjFjD,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASK,CAArB;AACA6D,MAAAA,YAAY,CAAC5D,IAAb,CAAkBV,OAAO,CAACS,CAAD,CAAzB;AACA8D,MAAAA,YAAY,CAAC7D,IAAb,CAAkBD,CAAlB;AACD;;AAEDgD,IAAAA,QAAQ,GAAGa,YAAY,CAACV,KAAb,CAAmBS,CAAC,IAAIA,CAAC,KAAKC,YAAY,CAAC,CAAD,CAA1C,CAAX;AACAnE,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBkE,YAAlC;;AACA,QAAIb,QAAQ,KAAK,IAAb,IAAqBa,YAAY,CAAC,CAAD,CAAZ,IAAmB,IAAxC,IAAgDA,YAAY,CAACtC,MAAb,KAAwBoB,SAA5E,EAAuF;AACrFK,MAAAA,QAAQ,GAAG,KAAX;AACA,aAAO;AACL1D,QAAAA,OAAO,EAAEwE,YADJ;AAELrC,QAAAA,MAAM,EAAEoC,YAAY,CAAC,CAAD,CAFf;AAGLE,QAAAA,MAAM,EAAExB;AAHH,OAAP;AAKD;AACF,GA/F0C,CAiG3C;;;AACAA,EAAAA,MAAM,GAAG,IAAT;;AACA,OAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,WAApB,EAAiCvD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,OAAO,CAACF,CAAD,CAAP,KAAe,IAAnB,EAAyB;AACvBkD,MAAAA,MAAM,GAAG,KAAT;AACA;AACD;AACF;;AAED,SAAO;AACLjD,IAAAA,OAAO,EAAE,IADJ;AAELmC,IAAAA,MAAM,EAAE,IAFH;AAGLc,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) { // eslint-disable-line no-unused-vars\r\n  const className = 'square ' + (props.winningsquare ? 'winningsquare' : '')\r\n  return ( <\r\n    button className = {\r\n      className\r\n    }\r\n    onClick = {\r\n      props.onClick\r\n    } > {\r\n      props.value\r\n    } <\r\n    /button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component { // eslint-disable-line no-unused-vars\r\n\r\n    renderSquare(i) {\r\n      const indexes = this.props.indexes;\r\n      return ( <\r\n        Square key = {\r\n          i\r\n        }\r\n        value = {\r\n          this.props.squares[i]\r\n        }\r\n        onClick = {\r\n          () => this.props.onClick(i)\r\n        }\r\n        winningsquare = {\r\n          indexes && indexes.includes(i)\r\n        }\r\n        />\r\n      );\r\n    }\r\n\r\n    render() {\r\n      console.log(this.props.size);\r\n      let boardsize = this.props.size;\r\n      let cols = [];\r\n      for (let i = 0; i < boardsize; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < boardsize; j++) {\r\n          row.push(this.renderSquare(i * boardsize + j));\r\n        }\r\n        cols.push( < div key = {\r\n            i\r\n          }\r\n          className = \"board-row\" > {\r\n            row\r\n          } < /div>);\r\n        }\r\n\r\n        return ( <\r\n          div key = {\r\n            cols\r\n          } > {\r\n            cols\r\n          } < /div>\r\n        );\r\n      }\r\n    }\r\n\r\n    class Game extends React.Component { // eslint-disable-line no-unused-vars\r\n      constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n          isAscending: true,\r\n          boardsize: 3,\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n          history: [{\r\n            squares: Array(9).fill(null),\r\n          }],\r\n        };\r\n      }\r\n\r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n        console.log(event.target.size.value);\r\n        let boardLength = parseInt(event.target.size.value) * parseInt(event.target.size.value);\r\n        console.log(boardLength);\r\n        console.log(typeof boardLength);\r\n        this.setState({\r\n          boardsize: parseInt(event.target.size.value),\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n          history: [{\r\n            squares: Array(boardLength).fill(null),\r\n            lastCoords: 0\r\n          }],\r\n        });\r\n      }\r\n\r\n      handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares, this.state.boardsize).winner || squares[i]) {\r\n          return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n          history: history.concat([{\r\n            squares: squares,\r\n            lastCoords: i\r\n          }]),\r\n          stepNumber: history.length,\r\n          xIsNext: !this.state.xIsNext,\r\n        });\r\n      }\r\n\r\n      handleSort() {\r\n        this.setState({\r\n          isAscending: !this.state.isAscending\r\n        });\r\n      }\r\n\r\n      jumpTo(step) {\r\n        this.setState({\r\n          stepNumber: step,\r\n          xIsNext: (step % 2) === 0,\r\n        });\r\n      }\r\n\r\n      render() {\r\n        var history = this.state.history;\r\n        var current = history[this.state.stepNumber];\r\n        var winInfo = calculateWinner(current.squares, this.state.boardsize);\r\n        var winner = null;\r\n        if (winInfo) {\r\n          winner = winInfo.winner;\r\n        }\r\n\r\n        let moves = history.map((step, move) => {\r\n          var lastCoords = step.lastCoords;\r\n          var col = 1 + lastCoords % this.state.boardsize;\r\n          var row = 1 + Math.floor(lastCoords / this.state.boardsize);\r\n          var desc = move ?\r\n            `Go to move #${move} (${col}, ${row})` :\r\n            'Go to game start';\r\n\r\n          return ( <\r\n            li key = {\r\n              move\r\n            } >\r\n            <\r\n            button className = {\r\n              move === this.state.stepNumber ? 'selected-move' : ''\r\n            }\r\n            onClick = {\r\n              () => this.jumpTo(move)\r\n            } > {\r\n              desc\r\n            } < /button> <\r\n            /li>\r\n          );\r\n        });\r\n\r\n\r\n        let status;\r\n        if (winner) {\r\n          status = 'Winner: ' + winner;\r\n        } else {\r\n          if (winInfo.isDraw) {\r\n            status = \"Draw\";\r\n          } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n          }\r\n        }\r\n        //reverse the order of the move list\r\n        const isAscending = this.state.isAscending;\r\n        if (!isAscending) {\r\n          moves.reverse();\r\n        }\r\n\r\n        return ( <\r\n          div className = \"game\" >\r\n          <\r\n          ul >\r\n          <\r\n          li >\r\n          <\r\n          label className = \"title\" > Tic - Tac - Toe! < /label> <\r\n          /li> <\r\n          li >\r\n          <\r\n          div >\r\n          <\r\n          ul >\r\n          <\r\n          li >\r\n          <\r\n          form className = \"sizeform\"\r\n          onSubmit = {\r\n            this.handleSubmit\r\n          } >\r\n          <\r\n          label >\r\n          Board Size:\r\n          <\r\n          input type = \"number\"\r\n          name = \"size\"\r\n          min = \"2\"\r\n          defaultValue = {\r\n            this.state.boardsize\r\n          }\r\n          /> <\r\n          /label> <\r\n          input type = \"submit\"\r\n          value = \"Start New Game\" / >\r\n          <\r\n          /form> <\r\n          /li> <\r\n          li >\r\n          <\r\n          div > {\r\n            status\r\n          } < /div> <\r\n          /li> <\r\n          li >\r\n          <\r\n          div className = \"game-board\" >\r\n          <\r\n          Board squares = {\r\n            current.squares\r\n          }\r\n          size = {\r\n            this.state.boardsize\r\n          }\r\n          onClick = {\r\n            (i) => this.handleClick(i)\r\n          }\r\n          indexes = {\r\n            winInfo.indexes\r\n          }\r\n          /> <\r\n          /div> <\r\n          /li> <\r\n          /ul> <\r\n          /div> <\r\n          /li> <\r\n          li >\r\n          <\r\n          div className = \"game-info\" >\r\n          <\r\n          button onClick = {\r\n            () => this.handleSort()\r\n          } > {\r\n            isAscending ? 'descending' : 'ascending'\r\n          } <\r\n          /button> <\r\n          ol > {\r\n            moves\r\n          } <\r\n          /ol> <\r\n          /div> <\r\n          /li> <\r\n          /ul> <\r\n          /div>\r\n        );\r\n      }\r\n    }\r\n\r\n    // ========================================\r\n\r\n    ReactDOM.render( <\r\n      Game / > ,\r\n      document.getElementById('root')\r\n    );\r\n\r\n    function calculateWinner(squares, sizeboard) {\r\n\r\n      let boardlength = sizeboard * sizeboard;\r\n\r\n\r\n      let verticalwin = false;\r\n      let horizontalwin = false;\r\n      let diag1win = false;\r\n      let diag2win = false;\r\n      let isDraw = false;\r\n      console.log(\"-----Beginning tests-----\");\r\n      console.log(\"board size = \" + sizeboard);\r\n      console.log(\"Squares: \" + squares);\r\n      //test for vertical win\r\n      for (let i = 0; i < sizeboard; i++) {\r\n        let verticalsquares = [];\r\n        let verticalindexes = [];\r\n        for (let j = i; j < boardlength; j += sizeboard) {\r\n          console.log(\"i = \" + i + \" j= \" + j);\r\n          verticalsquares.push(squares[j]);\r\n          verticalindexes.push(j);\r\n        }\r\n        verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\r\n        console.log(\"vertical test starting at i = \" + i + \": \" + verticalsquares);\r\n        if (verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\r\n          verticalwin = false;\r\n          return {\r\n            indexes: verticalindexes,\r\n            winner: verticalsquares[0],\r\n            isDraw: isDraw\r\n          }\r\n        }\r\n      }\r\n      //test for horizontal victory\r\n      for (let k = 0; k < boardlength; k += sizeboard) {\r\n        let horizontalsquares = [];\r\n        let horizontalindexes = [];\r\n        for (let l = k; l < k + sizeboard; l++) {\r\n          console.log(\"k = \" + k + \" l = \" + l);\r\n          horizontalsquares.push(squares[l]);\r\n          horizontalindexes.push(l);\r\n        }\r\n        horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\r\n        console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\r\n        if (horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\r\n          horizontalwin = false;\r\n          return {\r\n            indexes: horizontalindexes,\r\n            winner: horizontalsquares[0],\r\n            isDraw: isDraw\r\n          }\r\n        }\r\n      }\r\n\r\n      if (sizeboard > 1) { //diagonal code causes crashes with board size = 1\r\n\r\n        //test for top-left-to-bottom-right diagonal victory\r\n        let diag1squares = [];\r\n        let diag1indexes = [];\r\n        for (let i = 0; i < boardlength; i += sizeboard + 1) {\r\n          console.log(\"i = \" + i);\r\n          diag1squares.push(squares[i]);\r\n          diag1indexes.push(i);\r\n        }\r\n\r\n        diag1win = diag1squares.every(a => a === diag1squares[0]);\r\n        console.log(\"diagonal 1 test: \" + diag1squares);\r\n        if (diag1win === true && diag1squares[0] != null && diag1squares.length === sizeboard) {\r\n          diag1win = false;\r\n          return {\r\n            indexes: diag1indexes,\r\n            winner: diag1squares[0],\r\n            isDraw: isDraw\r\n          }\r\n        }\r\n\r\n        //test for bottom-left-to-top-right diagonal victory\r\n        let diag2squares = [];\r\n        let diag2indexes = [];\r\n        for (let j = sizeboard - 1; j < boardlength - sizeboard + 1; j += (sizeboard - 1)) {\r\n          console.log(\"j = \" + j)\r\n          diag2squares.push(squares[j]);\r\n          diag2indexes.push(j);\r\n        }\r\n\r\n        diag2win = diag2squares.every(a => a === diag2squares[0]);\r\n        console.log(\"diagonal 2 test: \" + diag2squares);\r\n        if (diag2win === true && diag2squares[0] != null && diag2squares.length === sizeboard) {\r\n          diag2win = false;\r\n          return {\r\n            indexes: diag2indexes,\r\n            winner: diag2squares[0],\r\n            isdraw: isDraw\r\n          }\r\n        }\r\n      }\r\n\r\n      //test for a draw\r\n      isDraw = true;\r\n      for (let i = 0; i < boardlength; i++) {\r\n        if (squares[i] === null) {\r\n          isDraw = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return {\r\n        indexes: null,\r\n        winner: null,\r\n        isDraw: isDraw\r\n      }\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}