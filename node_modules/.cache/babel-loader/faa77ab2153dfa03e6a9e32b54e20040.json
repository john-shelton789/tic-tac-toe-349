{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\John\\\\Documents\\\\CPSC 349\\\\front-end-dev-book\\\\tic-tac-toe-react\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  // eslint-disable-line no-unused-vars\n  const className = 'square' + (props.winningsquare ? 'winningsquare' : '');\n  return React.createElement(\"button\", {\n    className: className,\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  // eslint-disable-line no-unused-vars\n  renderSquare(i) {\n    const indexes = this.props.indexes;\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      winningsquare: indexes && indexes.includes(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    console.log(this.props.size);\n    let boardsize = this.props.size;\n    let cols = [];\n\n    for (let i = 0; i < boardsize; i++) {\n      let row = [];\n\n      for (let j = 0; j < boardsize; j++) {\n        row.push(this.renderSquare(i * boardsize + j));\n      }\n\n      cols.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, row));\n    }\n\n    return React.createElement(\"div\", {\n      key: cols,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, cols);\n  }\n\n}\n\nclass Game extends React.Component {\n  // eslint-disable-line no-unused-vars\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      isAscending: true,\n      boardsize: 3,\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(9).fill(null)\n      }]\n    };\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target.size.value);\n    let boardLength = parseInt(event.target.size.value) * parseInt(event.target.size.value);\n    console.log(boardLength);\n    console.log(typeof boardLength);\n    this.setState({\n      boardsize: parseInt(event.target.size.value),\n      stepNumber: 0,\n      xIsNext: true,\n      history: [{\n        squares: Array(boardLength).fill(null),\n        lastCoords: 0\n      }]\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares, this.state.boardsize).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        lastCoords: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  handleSort() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    var history = this.state.history;\n    var current = history[this.state.stepNumber];\n    var winInfo = calculateWinner(current.squares, this.state.boardsize);\n    var winner = winInfo.winner;\n    let moves = history.map((step, move) => {\n      var lastCoords = step.lastCoords;\n      var col = 1 + lastCoords % this.state.boardsize;\n      var row = 1 + Math.floor(lastCoords / this.state.boardsize);\n      var desc = move ? \"Go to move #\".concat(move, \" (\").concat(col, \", \").concat(row, \")\") : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: move === this.state.stepNumber ? 'selected-move' : '',\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    } //reverse the order of the move list\n\n\n    const isAscending = this.state.isAscending;\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \" Tic-Tac-Toe! \")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"sizeform\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Board Size:\", React.createElement(\"input\", {\n      type: \"number\",\n      name: \"size\",\n      min: \"2\",\n      defaultValue: this.state.boardsize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Start New Game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, status)), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      size: this.state.boardsize,\n      onClick: i => this.handleClick(i),\n      indexes: winInfo.indexes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })))))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.handleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, isAscending ? 'descending' : 'ascending'), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, moves)))));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 200\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares, sizeboard) {\n  let boardlength = sizeboard * sizeboard;\n  let verticalwin = false;\n  let horizontalwin = false;\n  let diag1win = false;\n  let diag2win = false;\n  console.log(\"-----Beginning tests-----\");\n  console.log(\"board size = \" + sizeboard);\n  console.log(\"Squares: \" + squares); //test for vertical win\n\n  for (let i = 0; i < sizeboard; i++) {\n    let verticalsquares = [];\n    let verticalindexes = [];\n\n    for (let j = i; j < boardlength; j += sizeboard) {\n      console.log(\"i = \" + i + \" j= \" + j);\n      verticalsquares.push(squares[j]);\n      verticalindexes.push(j);\n    }\n\n    verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\n    console.log(\"vertical test starting at i = \" + i + \": \" + verticalsquares);\n\n    if (verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\n      verticalwin = false;\n      return {\n        indexes: verticalindexes,\n        winner: verticalsquares[0]\n      };\n    }\n  } //test for horizontal victory\n\n\n  for (let k = 0; k < boardlength; k += sizeboard) {\n    let horizontalsquares = [];\n    let horizontalindexes = [];\n\n    for (let l = k; l < k + sizeboard; l++) {\n      console.log(\"k = \" + k + \" l = \" + l);\n      horizontalsquares.push(squares[l]);\n      horizontalindexes.push(l);\n    }\n\n    horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\n    console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\n\n    if (horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\n      horizontalwin = false;\n      return {\n        indexes: horizontalindexes,\n        winner: horizontalsquares[0]\n      };\n    }\n  }\n\n  if (sizeboard > 1) {\n    //diagonal code causes crashes with board size = 1\n    //test for top-left-to-bottom-right diagonal victory\n    let diag1squares = [];\n    let diag1indexes = [];\n\n    for (let i = 0; i < boardlength; i += sizeboard + 1) {\n      console.log(\"i = \" + i);\n      diag1squares.push(squares[i]);\n      diag1indexes.push(i);\n    }\n\n    diag1win = diag1squares.every(a => a === diag1squares[0]);\n    console.log(\"diagonal 1 test: \" + diag1squares);\n\n    if (diag1win === true && diag1squares[0] != null && diag1squares.length === sizeboard) {\n      diag1win = false;\n      return {\n        indexes: diag1indexes,\n        winner: diag1squares[0]\n      };\n    } //test for bottom-left-to-top-right diagonal victory\n\n\n    let diag2squares = [];\n    let diag2indexes = [];\n\n    for (let j = sizeboard - 1; j < boardlength - sizeboard + 1; j += sizeboard - 1) {\n      console.log(\"j = \" + j);\n      diag2squares.push(squares[j]);\n      diag2indexes.push(j);\n    }\n\n    diag2win = diag2squares.every(a => a === diag2squares[0]);\n    console.log(\"diagonal 2 test: \" + diag2squares);\n\n    if (diag2win === true && diag2squares[0] != null && diag2squares.length === sizeboard) {\n      diag2win = false;\n      return {\n        indexes: diag2indexes,\n        winner: diag2squares[0]\n      };\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["D:/Users/John/Documents/CPSC 349/front-end-dev-book/tic-tac-toe-react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","className","winningsquare","onClick","value","Board","Component","renderSquare","i","indexes","squares","includes","render","console","log","size","boardsize","cols","row","j","push","Game","constructor","handleSubmit","bind","state","isAscending","stepNumber","xIsNext","history","Array","fill","event","preventDefault","target","boardLength","parseInt","setState","lastCoords","handleClick","slice","current","length","calculateWinner","winner","concat","handleSort","jumpTo","step","winInfo","moves","map","move","col","Math","floor","desc","status","reverse","document","getElementById","sizeboard","boardlength","verticalwin","horizontalwin","diag1win","diag2win","verticalsquares","verticalindexes","every","v","k","horizontalsquares","horizontalindexes","l","h","diag1squares","diag1indexes","a","diag2squares","diag2indexes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {// eslint-disable-line no-unused-vars\r\n  const className = 'square' + (props.winningsquare ? 'winningsquare' : '')\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {// eslint-disable-line no-unused-vars\r\n\r\n  renderSquare(i) {\r\n    const indexes = this.props.indexes;\r\n      return (\r\n        <Square key={i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n          winningsquare={indexes && indexes.includes(i)}\r\n        />\r\n      );\r\n    }\r\n\r\n  render() {\r\n    console.log(this.props.size);\r\n    let boardsize = this.props.size;\r\n    let cols = [];\r\n    for(let i = 0; i < boardsize; i++) {\r\n      let row = [];\r\n      for(let j = 0; j< boardsize; j++) {\r\n        row.push(this.renderSquare(i * boardsize + j));\r\n      }\r\n      cols.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n\r\n    return (\r\n    <div key={cols}>{cols}</div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {// eslint-disable-line no-unused-vars\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      isAscending: true,\r\n      boardsize: 3,\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      history: [{\r\n        squares:Array(9).fill(null),\r\n      }],\r\n    };\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(event.target.size.value);\r\n    let boardLength = parseInt(event.target.size.value) * parseInt(event.target.size.value);\r\n    console.log(boardLength);\r\n    console.log(typeof boardLength);\r\n    this.setState({\r\n      boardsize: parseInt(event.target.size.value),\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      history: [{\r\n        squares:Array(boardLength).fill(null),\r\n        lastCoords: 0\r\n      }],\r\n  });\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares, this.state.boardsize).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        lastCoords: i\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  handleSort() {\r\n  this.setState({isAscending: !this.state.isAscending});\r\n}\r\n\r\n  jumpTo(step) {\r\n   this.setState({\r\n     stepNumber: step,\r\n     xIsNext: (step % 2) === 0,\r\n   });\r\n }\r\n\r\n  render() {\r\n    var history = this.state.history;\r\n    var current = history[this.state.stepNumber];\r\n    var winInfo = calculateWinner(current.squares, this.state.boardsize);\r\n    var winner = winInfo.winner;\r\n\r\n    let moves = history.map((step, move) => {\r\n      var lastCoords = step.lastCoords;\r\n      var col = 1 + lastCoords % this.state.boardsize;\r\n      var row = 1 + Math.floor(lastCoords / this.state.boardsize);\r\n      var desc = move ?\r\n        `Go to move #${move} (${col}, ${row})` :\r\n        'Go to game start';\r\n\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === this.state.stepNumber ? 'selected-move' : ''}\r\n           onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    //reverse the order of the move list\r\n    const isAscending = this.state.isAscending;\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n      <ul>\r\n        <li>\r\n          <label className=\"title\"> Tic-Tac-Toe! </label>\r\n        </li>\r\n        <li>\r\n          <div>\r\n            <ul>\r\n              <li>\r\n                <form className=\"sizeform\" onSubmit={this.handleSubmit}>\r\n                  <label>\r\n                    Board Size:\r\n                    <input type=\"number\"\r\n                      name=\"size\"\r\n                      min=\"2\"\r\n                      defaultValue={this.state.boardsize}\r\n                      />\r\n                  </label>\r\n                  <input type=\"submit\" value=\"Start New Game\" />\r\n                </form>\r\n              </li>\r\n              <li>\r\n                <div>{status}</div>\r\n              </li>\r\n              <li>\r\n                <div className=\"game-board\">\r\n                  <Board\r\n                  squares={current.squares}\r\n                  size={this.state.boardsize}\r\n                  onClick={(i) => this.handleClick(i)}\r\n                  indexes={winInfo.indexes}\r\n                  />\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </li>\r\n        <li>\r\n          <div className=\"game-info\">\r\n            <button onClick={() => this.handleSort()}>\r\n            {isAscending ? 'descending' : 'ascending'}\r\n            </button>\r\n            <ol>\r\n              {moves}\r\n            </ol>\r\n          </div>\r\n        </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares, sizeboard) {\r\n\r\n  let boardlength = sizeboard * sizeboard;\r\n\r\n\r\n  let verticalwin = false;\r\n  let horizontalwin = false;\r\n  let diag1win = false;\r\n  let diag2win = false;\r\n  console.log(\"-----Beginning tests-----\");\r\n  console.log(\"board size = \" + sizeboard);\r\n  console.log(\"Squares: \" + squares);\r\n  //test for vertical win\r\n  for(let i = 0; i < sizeboard; i++) {\r\n    let verticalsquares = [];\r\n    let verticalindexes = [];\r\n    for(let j = i; j < boardlength; j += sizeboard) {\r\n      console.log(\"i = \" + i + \" j= \" + j);\r\n      verticalsquares.push(squares[j]);\r\n      verticalindexes.push(j);\r\n    }\r\n    verticalwin = verticalsquares.every(v => v === verticalsquares[0]);\r\n    console.log(\"vertical test starting at i = \" + i + \": \" +verticalsquares);\r\n    if(verticalwin === true && verticalsquares[0] != null && verticalsquares.length === sizeboard) {\r\n      verticalwin = false;\r\n      return {\r\n        indexes: verticalindexes,\r\n        winner: verticalsquares[0]\r\n      }\r\n    }\r\n  }\r\n  //test for horizontal victory\r\n  for(let k = 0; k < boardlength; k += sizeboard) {\r\n    let horizontalsquares = [];\r\n    let horizontalindexes = [];\r\n    for(let l = k; l < k + sizeboard; l++) {\r\n          console.log(\"k = \" + k + \" l = \" + l);\r\n      horizontalsquares.push(squares[l]);\r\n      horizontalindexes.push(l);\r\n    }\r\n    horizontalwin = horizontalsquares.every(h => h === horizontalsquares[0]);\r\n    console.log(\"horizontal test starting at k = \" + k + \": \" + horizontalsquares);\r\n    if(horizontalwin === true && horizontalsquares[0] != null && horizontalsquares.length === sizeboard) {\r\n      horizontalwin = false;\r\n      return {\r\n        indexes: horizontalindexes,\r\n        winner: horizontalsquares[0]\r\n      }\r\n      }\r\n    }\r\n\r\n  if(sizeboard > 1){//diagonal code causes crashes with board size = 1\r\n\r\n  //test for top-left-to-bottom-right diagonal victory\r\n  let diag1squares = [];\r\n  let diag1indexes = [];\r\n  for(let i = 0; i < boardlength; i += sizeboard + 1) {\r\n    console.log(\"i = \" + i);\r\n    diag1squares.push(squares[i]);\r\n    diag1indexes.push(i);\r\n  }\r\n\r\n  diag1win = diag1squares.every(a => a === diag1squares[0]);\r\n  console.log(\"diagonal 1 test: \" + diag1squares);\r\n  if (diag1win === true && diag1squares[0] != null && diag1squares.length === sizeboard){\r\n    diag1win = false;\r\n    return {\r\n      indexes: diag1indexes,\r\n      winner: diag1squares[0]\r\n    }\r\n  }\r\n\r\n  //test for bottom-left-to-top-right diagonal victory\r\n  let diag2squares = [];\r\n  let diag2indexes = [];\r\n  for(let j = sizeboard - 1; j < boardlength - sizeboard + 1; j+= (sizeboard - 1)) {\r\n    console.log(\"j = \" + j )\r\n    diag2squares.push(squares[j]);\r\n    diag2indexes.push(j);\r\n  }\r\n\r\n  diag2win = diag2squares.every(a => a === diag2squares[0]);\r\n  console.log(\"diagonal 2 test: \" + diag2squares);\r\n  if(diag2win === true && diag2squares[0] != null && diag2squares.length === sizeboard){\r\n    diag2win = false;\r\n    return {\r\n      indexes: diag2indexes,\r\n      winner: diag2squares[0]\r\n    }\r\n  }\r\n  }\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}